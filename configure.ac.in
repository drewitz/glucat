dnl    This file was part of the KDE libraries/packages
dnl    Copyright (C) 2001 Stephan Kulow (coolo@kde.org)
dnl                       modified by Walter Tasin (tasin@kdevelop.org)
dnl                       for c++ console applications
dnl                       modified by Paul Leopardi (paul.leopardi@anu.edu.au)
dnl                       for GluCat
dnl                       includes code from admin/acinclude.m4 also
dnl                       modified by Paul Leopardi (paul.leopardi@anu.edu.au)
dnl                       for GluCat
dnl                       incorporated code from KDE version of acinclude.m4
dnl                       modified by Paul Leopardi (paul.leopardi@anu.edu.au)
dnl                       for GluCat

dnl    This file is free software; you can redistribute it and/or
dnl    modify it under the terms of the GNU Library General Public
dnl    License as published by the Free Software Foundation; either
dnl    version 2 of the License, or (at your option) any later version.

dnl    This library is distributed in the hope that it will be useful,
dnl    but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl    Library General Public License for more details.

dnl    You should have received a copy of the GNU Library General Public License
dnl    along with this library; see the file COPYING.LIB.  If not, write to
dnl    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
dnl    Boston, MA 02111-1307, USA.

# Original Author was Kalle@kde.org
# I lifted it in some mater. (Stephan Kulow)
# I used much code from Janos Farkas

dnl Process this file with autoconf to produce a configure script.

AC_INIT([glucat],[0.8.0])
AC_CONFIG_MACRO_DIR([m4])
m4_include([m4/acinclude.m4])
AC_CONFIG_SRCDIR([aclocal.m4]) dnl a source file from your sub dir

dnl checks specific to GluCat

AC_DEFUN([GLUCAT_MSG_WARN_DEPRECATED],
[
  AC_MSG_WARN([The option $1=$2 is deprecated and will be removed in future versions.])
])

AC_DEFUN([GLUCAT_CHECK_COMPILERS],
[
  dnl As a side effect of testing introduced by autoconf, CXXFLAGS has been changed. Restore it.
  CXXFLAGS="$saved_CXXFLAGS"

  dnl process the command line arguments

  AC_ARG_ENABLE([debug],      [[  --enable-debug[=ARG]    enables debug symbols (yes|no|full) [default=no]]],
  [
    case "$enableval" in
      yes)
        glucat_use_debug_code="yes"
        glucat_use_ndebug_define="yes"
        ;;
      full)
        glucat_use_debug_code="full"
        glucat_use_ndebug_define="no"
        ;;
      no)
        glucat_use_debug_code="no"
        glucat_use_ndebug_define="yes"
        ;;
      *)
        glucat_use_debug_code="yes"
        glucat_use_ndebug_define="yes"
        ;;
    esac
  ],
    [glucat_use_debug_code="no"
     glucat_use_ndebug_define="yes"
  ])

  dnl Just for configure --help
  AC_ARG_ENABLE([dummyoption],[[  --disable-debug         disables debug output and debug symbols [default=yes]]],[],[])

  AC_ARG_ENABLE([strict],     [[  --enable-strict         compiles with strict compiler options (may not work!)]],
  [
    if test "$enableval" = "no"; then
      glucat_use_strict_options="no"
    else
      glucat_use_strict_options="yes"
    fi
  ],[glucat_use_strict_options="no"])

  AC_ARG_ENABLE([warnings],   [[  --disable-warnings      disables compilation with -Wall and similiar]],
  [
    if test "$enableval" = "no"; then
      glucat_use_warnings="no"
    else
      glucat_use_warnings="yes"
    fi
  ], [glucat_use_warnings="yes"])

  dnl enable warnings for debug build
  if test "$glucat_use_debug_code" != "no"; then
    glucat_use_warnings="yes"
  fi

  AC_ARG_ENABLE([profile],    [[  --enable-profile        creates profiling infos [default=no]]],
    [glucat_use_profiling="$enableval"],
    [glucat_use_profiling="no"])

  AC_ARG_ENABLE([pyclical],   [[  --enable-pyclical       uses Cython to build the PyClical Python extension module [default=yes]]],
    [glucat_use_pyclical="$enableval"],
    [glucat_use_pyclical="yes"])

  AC_ARG_WITH([map],          [[  --with-map[=ARG]        type of map to use (map|stdunordered) [default=stdunordered]]],
  [
    case "$withval" in
      map)
        glucat_use_map="map"
        ;;
      stdunordered)
        glucat_use_map="stdunordered"
        ;;
      *)
      AC_MSG_ERROR([Unknown option for --with-map])
        ;;
    esac
  ],[glucat_use_map="stdunordered"])

  AC_ARG_WITH([dense-mat],    [[  --with-dense-mat        uses dense matrices [default=yes]]],
    [glucat_use_dense_mat="$withval"],
    [glucat_use_dense_mat="yes"])

  AC_ARG_WITH([qd],           [[  --with-qd               uses dd_real and qd_real [default=no]]],
    [glucat_use_qd="$withval"],
    [glucat_use_qd="no"])

  AC_ARG_WITH([random],       [[  --with-random[=ARG]     type of random number generator to use (std|gsl) [default=std]]],
  [
    case "$withval" in
      std)
        glucat_use_random="std"
        ;;
      gsl)
        glucat_use_random="gsl"
        ;;
      *)
        AC_MSG_ERROR([Unknown option for --with-random])
        ;;
    esac
  ],[glucat_use_random="std"])

  AC_ARG_WITH([eig],          [[  --with-eig[=ARG]        library to use for eigenvalues (no|bindings) [default=no]]],
  [
    case "$withval" in
      no)
        glucat_use_eigenvalues="no"
        ;;
      bindings)
        glucat_use_eigenvalues="bindings"
        ;;
      *)
        AC_MSG_ERROR('Unknown option for --with-eig')
        ;;
    esac
  ],[glucat_use_eigenvalues="no"])

  AC_LANG([C]++)

  if test -z "$LDFLAGS" && test "$glucat_use_debug_code" = "no" && test "$GCC" = "yes"; then
    LDFLAGS=""
  fi

  AC_REQUIRE([AC_PROG_CXX])
  AC_PROG_CXX

  basename_cxx="$(basename $CXX)"

  AC_MSG_CHECKING([for $CXX version])
  if test "$GXX" = "yes"; then
    if test "$basename_cxx" = "clang++"; then
      dnl The following test is from user PHV on www.tek-tips.com
      clangxxversion=`$CXX -v < /dev/null 2>&1 | head -n 1 | awk '{for(i=1;i<NF;++i) if ([\$]i ~ /version/) print [\$](i+1)}'`
      AC_MSG_RESULT([$clangxxversion])
    fi
    if test "$basename_cxx" = "g++"; then
      dnl The following test is borrowed from VXL Project http://vxl.sourceforge.net/
      cxxversion=`$CXX -v < /dev/null 2>&1 | grep 'gcc version' | awk '{print [\$]3}'`
      AC_MSG_RESULT([$cxxversion])
    fi
    if test "$basename_cxx" = "icpc"; then
      icpcversion=`$CXX -dumpversion`
      AC_MSG_RESULT([$icpcversion])
    fi
  fi
  if test "$basename_cxx" = "icpc"; then
    CXXFLAGS="$CXXFLAGS -DBOOST_UBLAS_USE_LONG_DOUBLE"
    GLUCAT_CHECK_COMPILER_FLAG([fp-model precise],[CXXFLAGS="-fp-model precise $CXXFLAGS"])
  fi
  if test "$GXX" = "yes"; then
    GLUCAT_CXX_DEBUG_FLAG=""
    if test "$glucat_use_debug_code" != "no"; then
      GLUCAT_CHECK_COMPILER_FLAG([finline-limit=400],[CXXFLAGS="-finline-limit=400 $CXXFLAGS"])
      if test "$glucat_use_debug_code" = "full"; then
        CXXFLAGS="-O0 $CXXFLAGS"
        GLUCAT_CXX_DEBUG_FLAG="-g3"
      else
        CXXFLAGS="-O1 $CXXFLAGS"
        GLUCAT_CXX_DEBUG_FLAG="-g"
      fi

      dnl convenience compiler flags
      GLUCAT_CHECK_COMPILER_FLAG([Woverloaded-virtual],[WOVERLOADED_VIRTUAL="-Woverloaded-virtual"],[WOVERLOADED_VIRTUAL=""])
      AC_SUBST([WOVERLOADED_VIRTUAL])
    else
      CXXFLAGS="-O3 $CXXFLAGS"
      if test "$basename_cxx" = "g++"; then
        GLUCAT_CHECK_COMPILER_FLAG([march=native],[CXXFLAGS="$CXXFLAGS -march=native"])
        GLUCAT_CHECK_COMPILER_FLAG([funroll-loops],[CXXFLAGS="$CXXFLAGS -funroll-loops"])
        GLUCAT_CHECK_COMPILER_FLAG([fvariable-expansion-in-unroller],[CXXFLAGS="$CXXFLAGS -fvariable-expansion-in-unroller"])
        GLUCAT_CXX_DEBUG_FLAG="-g"
      fi
      if test "$basename_cxx" = "icpc"; then
        GLUCAT_CHECK_COMPILER_FLAG([xHost],[CXXFLAGS="$CXXFLAGS -xHost"])
      fi
    fi
    CXXFLAGS="$GLUCAT_CXX_DEBUG_FLAG $CXXFLAGS"
  fi

  if test "$glucat_use_ndebug_define" = "yes"; then
    CXXFLAGS="$CXXFLAGS -DNDEBUG"
  fi

  if test "$glucat_use_profiling" = "yes"; then
    GLUCAT_CHECK_COMPILER_FLAG([pg],[CXXFLAGS="$CXXFLAGS -pg"])
  fi

  dnl For compatibility with Cygwin gcc
  AC_CHECK_HEADERS([bits/wordsize.h],[CXXFLAGS="$CXXFLAGS -DHAVE_BITS_WORDSIZE_H"],[],[])

  glucat_extra_cxxflags_pyclical=""
  glucat_use_cython="no"
  if test "$glucat_use_pyclical" = "no"; then
    DO_NOT_COMPILE="$DO_NOT_COMPILE pyclical"
  else
    AC_MSG_CHECKING([for cython version])
    cythonversion=`cython --version < /dev/null 2>&1 | grep -i 'Cython version' | awk '{print [\$]3}'`
    if test "$cythonversion" = ""; then
      AC_MSG_RESULT([not found])
    else
      AC_MSG_RESULT([$cythonversion])
      glucat_use_cython="yes"
    fi
    AM_PATH_PYTHON
    if test "$GXX" = "yes"; then
      GLUCAT_CHECK_COMPILER_FLAG([fno-strict-aliasing],
        [glucat_extra_cxxflags_pyclical="$glucat_extra_cxxflags_pyclical -fno-strict-aliasing"])
      GLUCAT_CHECK_COMPILER_FLAG([Wno-unused],
        [glucat_extra_cxxflags_pyclical="$glucat_extra_cxxflags_pyclical -Wno-unused"])
    fi
  fi
  AC_SUBST([glucat_extra_cxxflags_pyclical])

  glucat_cxx_std="ansi"
  if test "$glucat_use_map" = "stdunordered"; then
    save_CXXFLAGS="$CXXFLAGS"
    if test "$GXX" = "yes"; then
      CXXFLAGS="$CXXFLAGS -std=c++11"
    fi
    AC_CHECK_HEADERS([unordered_map],
    [
      CXXFLAGS="$save_CXXFLAGS -D_GLUCAT_USE_STD_UNORDERED_MAP"
      glucat_cxx_std="cxx11"
    ],[CXXFLAGS="$save_CXXFLAGS"],[#include <map>])
  fi

  if test "$glucat_use_qd" != "no"; then
    glucat_have_qd="yes"
    glucat_add_libs=""
    GLUCAT_CHECK_LIB([qd],[main],[glucat_add_libs="-lqd $glucat_add_libs"],[glucat_have_qd="no"])
    if test "$glucat_have_qd" != "no"; then
      GLUCAT_CHECK_HEADERS([qd/qd_real.h],
      [
        CXXFLAGS="$CXXFLAGS -D_GLUCAT_USE_QD";
        all_libraries="$all_libraries $glucat_add_libs"
      ],[glucat_have_qd="no"],[])
    fi
  fi

  if test "$glucat_use_random" = "gsl"; then
    glucat_have_gsl="yes"
    glucat_add_libs=""
    if test "$basename_cxx" != "icpc"; then
      GLUCAT_CHECK_LIB([m],     [cos],           [glucat_add_libs="-lm $glucat_add_libs"],       [glucat_have_gsl="no"])
    fi
    GLUCAT_CHECK_LIB([gslcblas],[cblas_dgemm],   [glucat_add_libs="-lgslcblas $glucat_add_libs"],[glucat_have_gsl="no"])
    GLUCAT_CHECK_LIBS([gsl],    [gsl_blas_dgemm],[glucat_add_libs="-lgsl $glucat_add_libs"],     [glucat_have_gsl="no"],[-lgslcblas])
    if test "$glucat_have_gsl" != "no"; then
      GLUCAT_CHECK_HEADERS([gsl/gsl_rng.h],
      [
        CXXFLAGS="$CXXFLAGS -D_GLUCAT_USE_GSL_RANDOM";
        all_libraries="$all_libraries $glucat_add_libs"
      ],
      [glucat_have_gsl="no"],[])
    fi
  else
    if test "$glucat_use_random" = "std"; then
      save_CXXFLAGS="$CXXFLAGS"
      if test "$GXX" = "yes"; then
        CXXFLAGS="$CXXFLAGS -std=c++11"
      fi
      glucat_have_std_random="no"
      GLUCAT_CHECK_HEADERS([random],
      [
        glucat_have_std_random="yes"
        glucat_cxx_std="cxx11"
      ],
      [CXXFLAGS="$save_CXXFLAGS"])
    fi
  fi

  if test "$glucat_use_eigenvalues" = "bindings"; then
    glucat_have_lapack="yes"
    glucat_add_libs=""
    GLUCAT_CHECK_LIB([blas],  [main],[glucat_add_libs="-lblas $glucat_add_libs"],  [glucat_have_lapack="no"])
    GLUCAT_CHECK_LIB([lapack],[main],[glucat_add_libs="-llapack $glucat_add_libs"],[glucat_have_lapack="no"])
    if test "$glucat_have_lapack" != "no"; then
      all_libraries="$all_libraries $glucat_add_libs"
      GLUCAT_CHECK_HEADERS([boost/numeric/bindings/lapack/driver/gees.hpp],
        [CXXFLAGS="$CXXFLAGS -D_GLUCAT_USE_EIGENVALUES -D_GLUCAT_USE_BINDINGS";],[],[])
    fi
  fi

  if test "$glucat_use_dense_mat" != "no"; then
    CXXFLAGS="$CXXFLAGS -D_GLUCAT_USE_DENSE_MATRICES"
  fi

  if test "$GXX" = "yes"; then
    case $host in
      *-*-linux-gnu)
        if test "$glucat_cxx_std" = "cxx11"; then
          CXXFLAGS="-std=c++11 $CXXFLAGS"
        else
          if test "$basename_cxx" = "clang++"; then
            CXXFLAGS="-std=c++98 $CXXFLAGS"
          else
            CXXFLAGS="-ansi $CXXFLAGS"
          fi
        fi
        ;;
    esac
  fi

  if test "$glucat_use_warnings" = "yes"; then
    if test "$GXX" = "yes"; then
      CXXFLAGS="-Wall $CXXFLAGS"
      if test "$basename_cxx" = "clang++" || test "$basename_cxx" = "g++"; then
        GLUCAT_CHECK_COMPILER_FLAG([Wno-unused-local-typedefs],[CXXFLAGS="$CXXFLAGS -Wno-unused-local-typedefs"])
      fi
    fi
  fi

  if test "$GXX" = "yes" && test "$glucat_use_strict_options" = "yes"; then
    GLUCAT_CHECK_COMPILER_FLAG([pedantic],[CXXFLAGS="$CXXFLAGS -pedantic"])
    GLUCAT_CHECK_COMPILER_FLAG([Wextra],[CXXFLAGS="$CXXFLAGS -Wextra"])
    GLUCAT_CHECK_COMPILER_FLAG([Wno-unused-parameter],[CXXFLAGS="$CXXFLAGS -Wno-unused-parameter"])
  fi

  if test "$GXX" = "yes"; then
    if test "$basename_cxx" != "clang++"; then
      GLUCAT_CHECK_COMPILER_FLAG([fno-check-new],[CXXFLAGS="$CXXFLAGS -fno-check-new"])
    fi
    GLUCAT_CHECK_COMPILER_FLAG([fexceptions],[USE_EXCEPTIONS="-fexceptions"],[USE_EXCEPTIONS=""])
  fi
  AC_SUBST([USE_EXCEPTIONS])

  dnl obsolete macro - provided to keep things going
  USE_RTTI=""
  AC_SUBST([USE_RTTI])

  AC_PROG_CXXCPP

  if test "$GCC" = yes; then
    NOOPT_CXXFLAGS="-O0"
  fi

  AC_SUBST([NOOPT_CXXFLAGS])

  ifdef([AM_DEPENDENCIES],AC_REQUIRE([GLUCAT_ADD_DEPENDENCIES]),[])
])

AC_DEFUN([GLUCAT_ADD_DEPENDENCIES],
[
  [A]M_DEPENDENCIES([CXX])
])

dnl This is so we can use kde-common
AC_CONFIG_AUX_DIR([admin])

dnl This ksh/zsh feature conflicts with `cd blah ; pwd`
unset CDPATH

dnl Checking host/target/build systems, for make, install etc.
AC_CANONICAL_TARGET
dnl Perform program name transformation
AC_ARG_PROGRAM

dnl Automake doc recommends to do this only here. (Janos)
AM_INIT_AUTOMAKE

dnl almost the same like GLUCAT_SET_PREFIX but the path is /usr/local
dnl
unset CDPATH
dnl make /usr/local the default for the installation
AC_PREFIX_DEFAULT([/usr/local])

if test "x$prefix" = "xNONE"; then
  prefix="$ac_default_prefix"
  ac_configure_args="$ac_configure_args --prefix $prefix"
fi

dnl without this order in this file, automake will be confused!
dnl
AC_CONFIG_HEADERS([config.h])

GLUCAT_CHECK_EXTRA_LIBS
all_libraries="$all_libraries $USER_LDFLAGS"
all_includes="-I. -I.. $all_includes $USER_INCLUDES"

dnl checks for programs.
dnl first check for C++ compilers

saved_CXXFLAGS="$CXXFLAGS"
GLUCAT_CHECK_COMPILERS

CXXFLAGS="$CXXFLAGS $USE_EXCEPTIONS"

AC_SUBST([all_includes])
AC_SUBST([all_libraries])
LIBS="$all_libraries"
AC_SUBST([LIBS])

AC_SUBST([AUTODIRS])

AM_CONDITIONAL([make_pyclical],[test "$glucat_use_pyclical" = "yes"])
AM_CONDITIONAL([use_cython],[test "$glucat_use_cython" = "yes"])
