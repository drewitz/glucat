Before You Begin
================
 GluCat uses the C++ Standard Library and the Boost Library. Make sure
 you have these installed and working before attempting to use GluCat.
 Use the instructions at http://www.boost.org/more/download.html
 to obtain the Boost Library. As at 2002-12-28, you need to use Boost CVS,
 as Boost 1.29.0 does not contain a new enough uBLAS.

 If you are using g++ 3.X.Y, make sure that you have installed Boost with the same
 version of g++.

 The headers need a compiler which correctly handles template template classes.

 The code has so far been tested using Boost CVS (2002-12-28) with:
 1) SuSE Linux 8.1 using g++ 3.2
 2) SuSE Linux 8.1 using Intel C++ 7.0
 3) Red Hat Linux 7.1 using g++ 2.96 and libstdc++-3
 4) Digital UNIX V4.0F (Rev. 1229) using g++ 3.0.3
 (reported by configure as alphaev6-dec-osf4.0f)

To Test
=======
 Once you have downloaded, unzipped and untarred the source code,
 you should have a directory, glucat-xxx, where xxx is the version number.
 Under glucat-xxx you should see three directories, ./glucat, ./glucat-api and
 ./test.
 The following instructions are meant to be used with glucat-xxx as the current
 directory.

The Test Program
----------------
 The test program takes any number (including zero) of numeric parameters.
 Positive numbers in the range 1 to 16 correspond to coding examples
 ./test/peg01.h to ./test/peg16.h. These examples are run in numerical order
 With zero parameters, all examples from 1 to 16 are run in order.
 Many of the examples are run twice - once with framed_multi<Scalar_T> and
 once with matrix_multi<Scalar_T>. If you use a negative parameter -n, this
 will run a timing test which squares larger and larger multivectors within
 the subalgebra defined by the frame of the index set {-n, ..., -1, 1, ..., n}

To Make the Test Program
------------------------
 If you are using Linux on Intel, you should be able to test GluCat using only
 ./configure and make. What make does here is use the headers in ./glucat and
 the source in ./test to make the test program ./test/glucat

 If you are using Compaq Alpha, you will need to edit ./test/Makefile.in,
 comment out the line reading:
 CXXFLAGS = -O1 -finline-limit=400
 and uncomment the line reading:
 # CXXFLAGS = -O1 -finline-functions -mieee
 then run ./configure, then make.

 Once you have created the test program, create a runtime directory and copy
 ./test/eg8.txt into the runtime directory. This file is needed by programming
 example 8 (reading multivectors from input).

 You can find sample test output in ./test/eg3.res, ./test/test.out and
 ./test/test-6.out

 To run a meaningful timing test using the g++ compiler, edit
 ./test/Makefile.in, comment out the line reading:
 CXXFLAGS = -O1 -finline-limit=400
 and uncomment the line reading:
 # CXXFLAGS = -O2 -finline-functions -finline-limit=800
 then run ./configure, then make.

 WARNINGS:
 1) The optimized compilation may take a long time to complete.
 See http://www.garloff.de/kurt/freesoft/gcc/
 2) On Compaq Alpha, you will not be able to build the debug version
 of the test. The -g flag for g++ 3.0.3 fails with "string too big"
 on Compaq Alpha. This problem seems similar to eg,
 http://gcc.gnu.org/ml/gcc-bugs/2000-06/msg00557.html
 http://gcc.gnu.org/ml/gcc-bugs/1998-04/msg00700.html
 3) On Compaq Alpha, if you do not use -mieee, Test 11 will fail,
 with a floating point exception.  GluCat is written for IEEE arithmetic
 and Compaq Alpha does not  use strict IEEE arithmetic unless you tell
 it to via -mieee.
 4) Many Clifford algebra algorithms are exponential in both time and
 space complexity. In particular, programming example 7 (triality) may run
 very slowly.

To Install
==========
 Once you are satisfied that GluCat works, you can run make install.
 What make install does is to install the headers from ./glucat into the
 installation directory, which defaults to /usr/local/include
 You will need permission to update this directory, so you may need to
 su to root before you run make install.

Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes a while.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Type `make install' to install the programs and any data files and
     documentation.

  4. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.

