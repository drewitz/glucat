2007-09-09: 0.3.0
Two errors lurking in GluCat versions 0.0.1 through 0.2.3 have been fixed. 

1. The inner product was wrong. According to the definition, a & b == 0 if
either a or b is a scalar. In previous versions of GluCat a & b == a*b == a^b if
either a or b is a scalar. A new test, ./test00, checks many Geometric algebra 
identities, to ensure that this type of error is caught much earlier.
The increase in version number from 0.2.3 to 0.3.0 is to remind users that the
value of a & b has changed.

2. The lexicographical ordering of index sets was wrong. This affected the
ordering of terms both in output and internally in framed_multi<> when framed
multivectors use map<> rather than hash_map<>, ie. when
_GLUCAT_USE_GNU_CXX_HASH_MAP is not defined.

Also:
o The timing tests have been revised to add precision to the measurement of
operations on smaller multivectors. A new test, ./products is a timing test for
the *, ^, & and % products.
o A new constructor has been added, index_set(range), where range is a pair of
index_t values. This is intended to replace the function index_range(), which is
now deprecated and will be removed from GluCat 0.4.0. The new constructor was
needed because of differences between the current GNU and Intel compilers. The
timing tests have been revised to use this new constructor.

See the Changelog for a detailed list of changes.

2007-08-23: 0.2.3
GluCat now uses either dense or compressed matrices; LGPLv3.

If _GLUCAT_USE_DENSE_MATRICES is defined, matrix_multi<> uses a a dense 
matrix. Otherwise matrix_multi<> uses a compressed matrix type. In either 
case, basis matrices always use a compressed matrix type.

The ublas noalias assignment has been used where possible, to reduce the
creation of temporary copies of matrices.

The use of IEEE NaN has been improved to ensure that dense and compressed
matrices give the same result even if one or more entry is NaN. 
IEEE Inf is now also used where appropriate.

The pow() functions have been fixed to yield the correct powers of 0.

The following fixes which were in CVS are included in this release.
index_set_imp.h: 
Correct is_contiguous() so that it matches the requirements of
framed_multi<>::fold() and framed_multi<>::unfold().

framed_multi_imp.h: 
Fix fold() and unfold().

GluCat is now licenced using LGPLv3 or later. See COPYING.

See the Changelog for a detailed list of changes.

2007-02-28: 0.2.2
GluCat, now with Bit Wizardry, is even faster.

Various functions in glucat/index_set_imp.h now use bitwise algorithms whose
time is proportional to the log of the number of bits, or proportional to the 
number of bits set to true.
 
These algorithms are taken from and inspired by Joerg Arndt,  
"Algorithms for programmers", http://www.jjj.de/fxt/fxtbook.pdf 
Chapter 1, Bit wizardry, http://www.jjj.de/bitwizardry/bitwizardrypage.html

The file glucat/global.h now defines the macro _GLUCAT_BITS_PER_ULONG, 
which is used in glucat/index_set_imp.h to enable the proprocessor to select 
the 32-bit or 64-bit versions of some of the bitwise algorithms.

2007-01-14: 0.2.1
GluCat fifth anniversary edition is now faster.

A brief list of changes includes:

Configuration:
o Add optional argument --with-dense-mult corresponding to variable
glucat_use_dense_matrix_mult.
o Use variable glucat_use_dense_matrix_mult to decide when to add
-D_GLUCAT_USE_DENSE_MATRIX_MULT to CXXFLAGS.
o Drop support for KAI C++. GluCat was never tested with KAI C++, and Intel has
effectively replaced it with Intel C++.
o Change preferred name for Intel C++ from "icc" to "icpc" as per Intel
documentation.
o Check Intel C++ version and store it in icpcversion.
o When icpcversion is between "8" and "9" use -fabi-version=1 rather than
-fabi-version=0.
o Remove -I/usr/local/include from CXXFLAGS. GluCat configure has never checked
if this include helped.

Library:
Overall:
o Prefer const index_set_t to const index_set_t& - ie. pass index_set_t by value
rather than reference.
o Rename pair_t to term_t.
o Give "Construct a multivector from an index set and a scalar coordinate" a
default value of Scalar_T(1) for the coordinate.

glucat/glucat/framed_multi.h
o Make var_pair_t into the nested class var_term_t, including operator*= which
multiplies by a term_t.
o Delete operator* for var_pair_t.
o Define size_type.
o Make operator+= ("Add a term, if non-zero") public rather than private, to
allow fast() in matrix_multi_imp.h to use this operator.

glucat/index_set.h
o Add bool member function is_contiguous ("Determine if the index set is
contiguous, ie. has no gaps").

glucat/matrix_multi.h
o Define the type dense_matrix_t to use for dense matrices.

glucat/matrix_multi_imp.h
o In operator*= for matrix_multi_t use dense ublas::prod based on
_GLUCAT_USE_DENSE_MATRIX_MULT but only if both *this and rhs are both "dense
enough" -- defined as nnz is at least half the number of entries in the matrix.

glucat/portability.h
o Drop ISNAN macro -- never used.

Tests:
glucat/gfft_test/gfft_test.h
o Test GFFT for frames which are not contiguous.

See the Changelog for a detailed list of changes.

2006-12-06: 0.2.0
Glucat now properly defines and uses numeric_limits and isnan().
A brief list of changes includes:

o Define ISNAN(x) macro which uses isnan(x) macro if available, and otherwise
  uses std::isnan(x).
o Define numeric_limits<> and numeric_traits<>.
o Use std::numeric_limits<Scalar_T>::has_quiet_NaN and
  numeric_traits<Scalar_T>::isNaN().
o Use Doxygen to generate a PDF version of the GluCat API documentation.
o Prefer pass by value for types which are not expected to be larger than the
  word size.
o Use streamsize and cout.precision().
o Use index_t where applicable.
o Drop some portability workarounds for old compilers.
o In test11, define NDEBUG, to turn off spurious checking in uBLAS
  sparse_prod().
o Define template functions as static if they are intended to be used only
  within the header file.
o In tests, define template functions as static and move test functions from
  header files to source files.
o In portability.h, suppress spurious Intel compiler warnings.

See the Changelog for a detailed list of changes.

2005-08-31: 0.1.9
GluCat continues to track changes in g++ and Boost.
The code is now even closer to Standard C++, and a little cleaner.
This version of GluCat requires Boost 1.31.0, 1.33.0 or later.
See the Changelog for a detailed list of changes.

2004-08-11: 0.1.8
GluCat has had a few bugs fixed, and a few minor enhancements. 
The constuctor for index_set<> from string and the corresponding stream input
operator >> now work properly with strings of the form "1,2" as well as
"{1,2}". 
The sign_of_mult() function for index_set<> has been improved.
The subscripting operator [] for matrix_multi<> now works properly for index
sets not contained in m_frame. 
Programs which use GluCat can now invoke GluCat classes and functions from
separately compiled modules. To allow for this, the try_catch functions have
been moved from glucat/errors.h and glucat/errors_imp.h to the new file
test/try_catch.h.
Some constructors for matrix_multi<> have minor speed improvements.
The left contraction operator %= for framed_multi<> has a minor speed
improvement.
Compilation using g++ versions older than 3.3 now uses less agressive inlining.

2004-06-20: 0.1.7
GluCat now has an improved ./configure script which is better able to 
determine whether you have <boost/numeric/ublas/lu.hpp> available.

2004-05-09: 0.1.6
Glucat now compiles under gcc 3.4.
Note that the uBLAS in Boost 1.31.0 does NOT compile under gcc 3.4.
This has been fixed in Boost CVS.
 
2004-05-05: 0.1.5
GluCat has further optimizations. The fast conversion between framed_multi<> 
and matrix_multi<> and its inverse are now implementations of the matrix
representation algorithms described in the paper, "A generalized FFT for
Clifford algebras". The optimized fast conversion uses the new function odd(),
which gives the odd part of a multivector. A new configure option
"--with-hash-map" replaces the separate hash_map version of GluCat.
Note: This version of GluCat does NOT compile under gcc 3.4. 

2003-07-05: 0.1.4-hash_map
This is a hack to glucat-0.1.4 which uses __gnu_cxx::hash_map<> instead of
std::map<> for framed_multi<>. gfft_test-10.out shows that the computational
complexity of the GFT for R_{n,n}is now O(n*4^n).

2003-06-29: 0.1.4
GluCat has gained two bits. The mapping of index_set_t to bitset_t now treats
index 0 of index_set_t as a "virtual" bit rather than a real dead bit of
bitset_t. This allows DEFAULT_LO to be reduced by 1, and DEFAULT_HI to be
increased by 1. For a 32 bit unsigned long, the default index_set_t is
now index_set<-16,16>, using std::bitset<32> rather than index_set<-15,15>, 
which used std::bitset<31>.

2003-06-23: 0.1.3
GluCat now has a few optimizations. The tests have been split up into different
directories to reduce memory usage during compilation, especially with g++ -O3.
index_set<> has been optimized by using bitset_t and masks in fold() and
value_of_fold(). The inverse generalized FFT has been optimized by use of an
optimization to unit() and an optimization to nork() for the monomial case.
GluCat remains compatible with Boost 1.30.0, and also takes advantage of recent
changes to uBLAS, currently in Boost CVS.

2003-03-02: 0.1.2
GluCat now uses a generalized Fast Fourier Transform (FFT) to map between
framed_multi<> and matrix-multi<> at high dimensions. This greatly speeds up
operations in higher dimensions, for example multiplication and division.
A new ./transforms subdirectory includes a test program for the generalized FFT.
Also, the build process has been updated to make better use of autoconf and
automake. As a result, you should no longer need to edit Makefile.in

2003-01-08: 0.1.1
An enhancement to basis_element() includes the use of a basis_table as a cache
for basis elements. This should improve the speed of conversion between
framed_multi<> and matrix_multi<>, at the expense of memory. The tuning
parameter Tune_P::basis_max_count controls the size of the cache. If this is
set to zero, the cache is not used. The default value is
DEFAULT_Basis_Max_Count, which is set to 10. You can change it when you define
Tune_P, as is done intest/driver.h
Also included is a change to definition of template defaults for tuning<>, to
make these defaults easier to override.

2002-12-31: 0.1.0
GluCat is now compatible with gcc 3.2 and Intel C++ 7.0.
This should ensure that the code is closer to standard C++.
This version of GluCat was built using KDevelop 2.1.3 and Boost CVS
(2002-12-28).
GluCat now uses Boost uBLAS rather than MTL, for a number of reasons:
1 MTL needed extensive patching to work with Intel C++.
2 MTL maintenance seems to have halted.
3 Joerg Walter contributed a uBLAS interface for GluCat.
4 uBLAS uses expression templates and uBLAS matrices have value semantics.
  This makes the relevant GluCat library code easier to read and understand.
5 GluCat with uBLAS compiles faster than with MTL.
6 uBLAS is also generally faster than MTL. This makes GluCat generally faster.
Other improvements to GluCat include better use of IEEE NaN.

2002-08-15: 0.0.7
GluCat has been finally updated to be compatible with gcc 3.1.1, autoconf 2.5.2
and automake 1.63.This version of GluCat was built using KDevelop 2.1.2 and MTL
2.1.2-21.
Work continues to make GluCat and MTL compatible with Intel C++ 6.0.

2002-04-15: 0.0.6
A bug in elliptic() has been fixed. elliptic now returns a unit volume element I
whichcommutes with the whole relevant subalgebra

2002-01-27: 0.0.5
GluCat has now been tested with gcc 3.0.3 and should now be very compatible with
standard C++.

2002-01-24: 0.0.4
GluCat now uses the real irreducible representation for matrix_multi<>, which
should now runacceptably quickly for Cl(p,0) and Cl(0,q).

2002-01-22: 0.0.3
A nasty bug in matrix_multi<>::operator==() is now fixed. cos(), sin() and
matrx_multi<>::norm() have been optimized.

2002-01-12: 0.0.2
GluCat now uses CVS.

2002-01-09: 0.0.1

