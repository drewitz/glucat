dnl    This file is part of the KDE libraries/packages
dnl    Copyright (C) 2001 Stephan Kulow (coolo@kde.org)
dnl                       modified by Walter Tasin (tasin@kdevelop.org)
dnl                       for c++ console applications
dnl                       modified by Paul Leopardi (paul.leopardi@unsw.edu.au)
dnl                       for GluCat
dnl                       includes code from admin/acinclude.m4 also
dnl                       modified by Paul Leopardi (paul.leopardi@unsw.edu.au)
dnl                       for GluCat

dnl    This file is free software; you can redistribute it and/or
dnl    modify it under the terms of the GNU Library General Public
dnl    License as published by the Free Software Foundation; either
dnl    version 2 of the License, or (at your option) any later version.

dnl    This library is distributed in the hope that it will be useful,
dnl    but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl    Library General Public License for more details.

dnl    You should have received a copy of the GNU Library General Public License
dnl    along with this library; see the file COPYING.LIB.  If not, write to
dnl    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
dnl    Boston, MA 02111-1307, USA.

# Original Author was Kalle@kde.org
# I lifted it in some mater. (Stephan Kulow)
# I used much code from Janos Farkas

dnl Process this file with autoconf to produce a configure script.

AC_INIT(acinclude.m4) dnl a source file from your sub dir

AC_DEFUN([GLUCAT_CHECK_LIB],
[
  glucat_saved_ldflags="$LDFLAGS"
  LDFLAGS="$LDFLAGS $all_libraries"
  AC_CHECK_LIB($1, $2, $3, $4)
  LDFLAGS="$glucat_saved_ldflags"
])

AC_DEFUN([GLUCAT_CHECK_COMPILERS],
[
  AC_ARG_ENABLE(debug,      [[  --enable-debug[=ARG]    enables debug symbols (yes|no|full) [default=yes]]],
  [
    case $enableval in
      yes)
        kde_use_debug_code="yes"
        kde_use_ndebug_define=yes
        ;;
      full)
        kde_use_debug_code="full"
        kde_use_ndebug_define=no
        ;;
      no)
        kde_use_debug_code="no"
        kde_use_ndebug_define=yes
        ;;
      *)
        kde_use_debug_code="yes"
        kde_use_ndebug_define=yes
        ;;
    esac
  ],
    [kde_use_debug_code="yes"
     kde_use_ndebug_define=yes
  ])

  dnl Just for configure --help
  AC_ARG_ENABLE(dummyoption,[[  --disable-debug         disables debug output and debug symbols [default=no]]],[],[])

  AC_ARG_ENABLE(strict,     [[  --enable-strict         compiles with strict compiler options (may not work!)]],
   [
    if test $enableval = "no"; then
         kde_use_strict_options="no"
       else
         kde_use_strict_options="yes"
    fi
   ], [kde_use_strict_options="no"])

  AC_ARG_ENABLE(warnings,   [[  --disable-warnings      disables compilation with -Wall and similiar]],
   [
    if test $enableval = "no"; then
         kde_use_warnings="no"
       else
         kde_use_warnings="yes"
    fi
   ], [kde_use_warnings="yes"])

  dnl enable warnings for debug build
  if test "$kde_use_debug_code" != "no"; then
    kde_use_warnings=yes
  fi

  AC_ARG_ENABLE(profile,    [[  --enable-profile        creates profiling infos [default=no]]],
    [kde_use_profiling=$enableval],
    [kde_use_profiling="no"])

  AC_ARG_WITH(map,          [[  --with-map[=ARG]        type of map to use (map|hash|unordered) [default=unordered]]],
    [
      case $withval in
        map)
          glucat_use_="map"
          ;;
        hash)
          glucat_use_map="hash"
          ;;
        unordered)
          glucat_use_map="unordered"
          ;;
        *)
          glucat_use_map="unordered"
          ;;
      esac
    ],
    [glucat_use_map="unordered"])

  AC_ARG_WITH(dense-mat,    [[  --with-dense-mat        uses dense matrices [default=yes]]],
    [glucat_use_dense_mat=$withval],
    [glucat_use_dense_mat="yes"])

  AC_ARG_WITH(qd,           [[  --with-qd               uses dd_real and qd_real [default=no]]],
    [glucat_use_qd=$withval],
    [glucat_use_qd="no"])

  AC_ARG_WITH(random,       [[  --with-random[=ARG]     type of random number generator to use (tr1|gsl) [default=tr1]]],
    [
      case $withval in
        tr1)
          glucat_use_random="tr1"
          ;;
        gsl)
          glucat_use_random="gsl"
          ;;
        *)
          glucat_use_random="tr1"
          ;;
      esac
    ],
    [glucat_use_random="tr1"])

  AC_ARG_ENABLE(pyclical,   [[  --enable-pyclical       uses Cython to build pyclical prototype [default=no]]],
    [glucat_use_pyclical=$enableval],
    [glucat_use_pyclical="no"])

  AC_ARG_WITH(eig,          [[  --with-eig[=ARG]        library to use for eigenvalues (no|alglib|bindingsv1|bindings) [default=no]]],
    [
      case $withval in
        no)
          glucat_use_eigenvalues="no"
          ;;
        alglib)
          glucat_use_eigenvalues="alglib"
          ;;
        bindingsv1)
          glucat_use_eigenvalues="bindingsv1"
          ;;
        bindings)
          glucat_use_eigenvalues="bindings"
          ;;
        *)
          glucat_use_eigenvalues="no"
          ;;
      esac
    ],
    [glucat_use_eigenvalues="no"])

  dnl this prevents stupid AC_PROG_CC to add "-g" to the default CFLAGS
  CFLAGS=" $CFLAGS"

  AC_PROG_CC

  if test -z "$LDFLAGS" && test "$kde_use_debug_code" = "no" && test "$GCC" = "yes"; then
     LDFLAGS=""
  fi

  AC_PROG_CPP

  CXXFLAGS=" $CXXFLAGS"

  AC_PROG_CXX
  AC_LANG(C++)

  if test "$GXX" = "yes"; then
    dnl The following test is borrowed from VXL Project http://vxl.sourceforge.net/
    cxxversion=`$CXX -v < /dev/null 2>&1 | grep 'gcc version' | awk '{print [\$]3}'`
    AC_MSG_RESULT( $CXX version $cxxversion )
  fi
  if test "$CXX" = "icpc"; then
    icpcversion=`$CXX -v < /dev/null 2>&1 | head -n 1 | awk '{print [\$]2}'`
    AC_MSG_RESULT( $CXX version $icpcversion )
  fi
  if test "$CXX" = "icpc"; then
    CXXFLAGS="$CXXFLAGS -DBOOST_UBLAS_USE_LONG_DOUBLE"
    if test "$icpcversion" \< "11" ; then
       KDE_CHECK_COMPILER_FLAG(mp1,[CXXFLAGS="-mp1 $CXXFLAGS"])
    else
       KDE_CHECK_COMPILER_FLAG([fp-model precise],[CXXFLAGS="-fp-model precise $CXXFLAGS"])
    fi
  fi
  if test "$GXX" = "yes" || test "$CXX" = "icpc"; then
    GLUCAT_CXX_DEBUG_FLAG=""
    if test "$kde_use_debug_code" != "no"; then
       if test "$CXX" = "icpc"; then
          CXXFLAGS="-O0 $CXXFLAGS"
       else
        if test "$kde_use_debug_code" = "full"; then
          CXXFLAGS="-O0 -finline-limit=400 $CXXFLAGS"
          GLUCAT_CXX_DEBUG_FLAG="-g3"
        else
          CXXFLAGS="-O1 -finline-limit=400 $CXXFLAGS"
          GLUCAT_CXX_DEBUG_FLAG="-g"
        fi
       fi

      dnl convenience compiler flags
      KDE_CHECK_COMPILER_FLAG(Woverloaded-virtual, [WOVERLOADED_VIRTUAL="-Woverloaded-virtual"], [WOVERLOADED_VIRTUAL=""])
      AC_SUBST(WOVERLOADED_VIRTUAL)
    else
       if test "$CXX" = "icpc"; then
          CXXFLAGS="$CXXFLAGS -O3"
       else
        if test "$cxxversion" \< "3.3" ; then
          CXXFLAGS="$CXXFLAGS -O3 -finline-limit=1200"
        else
         if test "$cxxversion" \> "4" && test "$cxxversion" \< "4.0.2" ; then
           KDE_CHECK_COMPILER_FLAG(fno-strict-aliasing, [CXXFLAGS="$CXXFLAGS -fno-strict-aliasing"])
         fi
         if test "$cxxversion" \< "4.1" ; then
          CXXFLAGS="$CXXFLAGS -O3 -finline-limit=2400"
         else
          case $host in
            x86_64-*-*)
            if test "$cxxversion" \> "4.2.1" ; then
             CXXFLAGS="$CXXFLAGS -march=k8"
            fi
            ;;
          esac
          CXXFLAGS="$CXXFLAGS -O3 --param max-inline-insns-single=5400 --param large-function-insns=5400"
          KDE_CHECK_COMPILER_FLAG(funroll-loops,[CXXFLAGS="$CXXFLAGS -funroll-loops"])
          KDE_CHECK_COMPILER_FLAG(fvariable-expansion-in-unroller,[CXXFLAGS="$CXXFLAGS -fvariable-expansion-in-unroller"])
          KDE_CHECK_COMPILER_FLAG(fno-math-errno,[CXXFLAGS="$CXXFLAGS -fno-math-errno"])
          KDE_CHECK_COMPILER_FLAG(fno-trapping-math,[CXXFLAGS="$CXXFLAGS -fno-trapping-math"])
         fi
        fi
        GLUCAT_CXX_DEBUG_FLAG="-g"
       fi
    fi

    case $host in
      alpha*-*-*)	GLUCAT_CXX_DEBUG_FLAG=""
        ;;
    esac
    CXXFLAGS="$CXXFLAGS $GLUCAT_CXX_DEBUG_FLAG"
  fi

  if test "$kde_use_ndebug_define" = "yes"; then
    CXXFLAGS="$CXXFLAGS -DNDEBUG"
  fi

  if test "$kde_use_profiling" = "yes"; then
    KDE_CHECK_COMPILER_FLAG(pg,
    [
      CFLAGS="$CFLAGS -pg"
      CXXFLAGS="$CXXFLAGS -pg"
    ])
  fi

  if test "$kde_use_warnings" = "yes"; then
      if test "$GXX" = "yes"; then
        case $host in
          *-*-linux-gnu)
            CFLAGS="-ansi -W -Wall -pedantic -Wshadow -Wpointer-arith -Wmissing-prototypes -Wwrite-strings -D_XOPEN_SOURCE=500 -D_BSD_SOURCE $CFLAGS"
            CXXFLAGS="-ansi $CXXFLAGS"
          ;;
        esac
        CXXFLAGS="-Wall $CXXFLAGS"
        if test "$cxxversion" \> "4" ; then
          if test "$cxxversion" \< "4.1" ; then
            KDE_CHECK_COMPILER_FLAG(Wstrict-aliasing=2,[CXXFLAGS="$CXXFLAGS -Wstrict-aliasing=2"])
          fi
        fi
     fi
  fi

  if test "$GXX" = "yes" && test "$kde_use_strict_options" = "yes"; then
    if test "$cxxversion" \< "4.1" ; then
      CXXFLAGS="-Wcast-qual -Wshadow -Wcast-align $CXXFLAGS"
    else
      KDE_CHECK_COMPILER_FLAG(pedantic,[CXXFLAGS="$CXXFLAGS -pedantic"])
      KDE_CHECK_COMPILER_FLAG(Wextra,[CXXFLAGS="$CXXFLAGS -Wextra"])
      KDE_CHECK_COMPILER_FLAG(Wno-unused-parameter,[CXXFLAGS="$CXXFLAGS -Wno-unused-parameter"])
    fi
  fi

  if test "$glucat_use_map" = "unordered"; then
  AC_CHECK_HEADERS([tr1/unordered_map],
    [CXXFLAGS="$CXXFLAGS -D_GLUCAT_USE_TR1_UNORDERED_MAP"],
    [],
    [#include <map>])
  else
    if test "$GXX" = "yes" && test "$glucat_use_map" = "hash"; then
    KDE_CHECK_COMPILER_FLAG(Wno-deprecated,[CXXFLAGS="$CXXFLAGS -Wno-deprecated"])
    AC_CHECK_HEADERS([ext/hash_map backward/hash_map],
      [
        CXXFLAGS="$CXXFLAGS -D_GLUCAT_USE_GNU_CXX_HASH_MAP"
        AC_CHECK_HEADERS([backward/hash_map],
          [CXXFLAGS="$CXXFLAGS -D_GLUCAT_USE_BACKWARD_HASH_MAP"],
          [],
          [#include <map>])
      ],
      [],
      [#include <map>])
    fi
  fi

  if test "$glucat_use_dense_mat" != "no"; then
    CXXFLAGS="$CXXFLAGS -D_GLUCAT_USE_DENSE_MATRICES"
  fi

  if test "$glucat_use_qd" != "no"; then
    glucat_have_qd=yes
    glucat_add_libs=""
    GLUCAT_CHECK_LIB(qd, main, [glucat_add_libs="$glucat_add_libs -lqd"], [glucat_have_qd=no])
    if test "$glucat_have_qd" != "no"; then
      AC_CHECK_HEADERS([qd/qd_config.h],
      [
        CXXFLAGS="$CXXFLAGS -D_GLUCAT_USE_QD";
        all_libraries="$all_libraries $glucat_add_libs"
      ],
      [
        glucat_have_qd=no
      ],[])
    fi
  fi

  if test "$glucat_use_random" == "gsl"; then
    glucat_have_gsl=yes
    glucat_add_libs=""
    GLUCAT_CHECK_LIB(gsl,      main, [glucat_add_libs="$glucat_add_libs -lgsl"],      [glucat_have_gsl=no])
    GLUCAT_CHECK_LIB(gslcblas, main, [glucat_add_libs="$glucat_add_libs -lgslcblas"], [glucat_have_gsl=no])
    if test "$glucat_have_gsl" != "no"; then
      AC_CHECK_HEADERS([gsl/gsl_rng.h],
      [
        CXXFLAGS="$CXXFLAGS -D_GLUCAT_USE_GSL_RANDOM";
        all_libraries="$all_libraries $glucat_add_libs"
      ],
      [
        glucat_have_gsl=no
      ],[])
    fi
  else
    glucat_have_tr1_random=no
    AC_CHECK_HEADERS([tr1/random],
    [
      glucat_have_tr1_random=yes
    ],[])
  fi

  if test "$glucat_use_pyclical" == "no"; then
    DO_NOT_COMPILE="$DO_NOT_COMPILE pyclical"
  fi

  if test "$glucat_use_eigenvalues" == "alglib"; then
    glucat_have_alglib=yes
    glucat_add_libs=""
    GLUCAT_CHECK_LIB(alglib, gamma, [glucat_add_libs="$glucat_add_libs -lalglib"], [glucat_have_alglib=no],[-lm])
    if test "$glucat_have_alglib" != "no"; then
      KDE_CHECK_HEADERS([alglib/evd.h],
      [
        CXXFLAGS="$CXXFLAGS -D_GLUCAT_USE_EIGENVALUES -D_GLUCAT_USE_ALGLIB";
        all_libraries="$all_libraries -lalglib"
      ],[],[])
    fi
  fi

  if test "$glucat_use_eigenvalues" == "bindingsv1" || test "$glucat_use_eigenvalues" == "bindings"; then
    glucat_have_lapack=yes
    glucat_add_libs=""
    GLUCAT_CHECK_LIB(lapack, main, [glucat_add_libs="$glucat_add_libs -llapack"], [glucat_have_lapack=no])
    GLUCAT_CHECK_LIB(blas,   main, [glucat_add_libs="$glucat_add_libs -lblas"],   [glucat_have_lapack=no])
    if test "$glucat_have_lapack" != "no"; then
      all_libraries="$all_libraries $glucat_add_libs"
      if test "$glucat_use_eigenvalues" == "bindingsv1"; then
        KDE_CHECK_HEADERS([boost/numeric/bindings/lapack/gees.hpp],
        [
          CXXFLAGS="$CXXFLAGS -D_GLUCAT_USE_EIGENVALUES -D_GLUCAT_USE_BINDINGS_V1";
        ],[],[])
      fi
      if test "$glucat_use_eigenvalues" == "bindings"; then
        KDE_CHECK_HEADERS([boost/numeric/bindings/lapack/driver/gees.hpp],
        [
          CXXFLAGS="$CXXFLAGS -D_GLUCAT_USE_EIGENVALUES -D_GLUCAT_USE_BINDINGS";
        ],[],[])
      fi
    fi
  fi

  if test "$GXX" = "yes"; then
    KDE_CHECK_COMPILER_FLAG(fno-check-new, [CXXFLAGS="$CXXFLAGS -fno-check-new"])
    KDE_CHECK_COMPILER_FLAG(fexceptions, [USE_EXCEPTIONS="-fexceptions"], USE_EXCEPTIONS=	)
    if test "$CXX" = "icpc" && test "$icpcversion" \> "8" && test "$icpcversion" \< "9"; then
      KDE_CHECK_COMPILER_FLAG(fabi-version=1,[CXXFLAGS="$CXXFLAGS -fabi-version=1"])
    else
     if test "$cxxversion" \> "4" && test "$cxxversion" \< "4.0.2" ; then
      KDE_CHECK_COMPILER_FLAG(fabi-version=0,[CXXFLAGS="$CXXFLAGS -fabi-version=0"])
     fi
    fi
  fi
  AC_SUBST(USE_EXCEPTIONS)
  dnl obsolete macro - provided to keep things going
  USE_RTTI=
  AC_SUBST(USE_RTTI)

  case "$host" in
      alpha*-*-*) test "$GXX" = yes && CXXFLAGS="-mieee $CXXFLAGS" ;;
      *-*-irix*)  test "$GXX" = yes && CXXFLAGS="$CXXFLAGS -D_LANGUAGE_C_PLUS_PLUS -D__LANGUAGE_C_PLUS_PLUS" ;;
      *-*-sysv4.2uw*) CXXFLAGS="$CXXFLAGS -D_UNIXWARE";;
      *-*-sysv5uw7*) CXXFLAGS="$CXXFLAGS -D_UNIXWARE7";;
      *-*-solaris*)
        if test "$GXX" = yes; then
          libstdcpp=`$CXX -print-file-name=libstdc++.so`
          if test ! -f $libstdcpp; then
             AC_MSG_ERROR([You've compiled gcc without --enable-shared. This doesn't work with KDE. Please recompile gcc with --enable-shared to receive a libstdc++.so])
          fi
        fi
        ;;
  esac

  AC_VALIDIFY_CXXFLAGS

  AC_PROG_CXXCPP

  if test "$GCC" = yes; then
     NOOPT_CXXFLAGS=-O0
     NOOPT_CFLAGS=-O0
  fi

  AC_SUBST(NOOPT_CXXFLAGS)
  AC_SUBST(NOOPT_CFLAGS)

  KDE_CHECK_FINAL

  ifdef([AM_DEPENDENCIES], AC_REQUIRE([KDE_ADD_DEPENDENCIES]), [])
])

dnl CXXFLAGS="$CXXFLAGS $USE_EXCEPTIONS"

dnl This is so we can use kde-common
AC_CONFIG_AUX_DIR(admin)

dnl This ksh/zsh feature conflicts with `cd blah ; pwd`
unset CDPATH

dnl Checking host/target/build systems, for make, install etc.
AC_CANONICAL_SYSTEM
dnl Perform program name transformation
AC_ARG_PROGRAM

dnl Automake doc recommends to do this only here. (Janos)
AM_INIT_AUTOMAKE(glucat,0.5.1)

dnl almost the same like KDE_SET_PREFIX but the path is /usr/local
dnl
unset CDPATH
dnl make /usr/local the default for the installation
AC_PREFIX_DEFAULT(/usr/local)

if test "x$prefix" = "xNONE"; then
  prefix=$ac_default_prefix
  ac_configure_args="$ac_configure_args --prefix $prefix"
fi
KDE_FAST_CONFIGURE
KDE_CONF_FILES

dnl without this order in this file, automake will be confused!
dnl
AC_CONFIG_HEADERS([config.h])

KDE_CHECK_EXTRA_LIBS
all_libraries="$all_libraries $USER_LDFLAGS"
all_includes="-I. -I.. $all_includes $USER_INCLUDES"

dnl checks for programs.
dnl first check for c/c++ compilers
GLUCAT_CHECK_COMPILERS

dnl CXXFLAGS="$NOOPT_CXXFLAGS" dnl __kdevelop[noopt]__
CFLAGS="$NOOPT_CFLAGS" dnl __kdevelop[noopt]__
CXXFLAGS="$CXXFLAGS $USE_EXCEPTIONS" dnl __kdevelop[exc]__

dnl create only shared libtool-libraries
AC_ENABLE_SHARED(yes)

dnl set the following to yes, if you want to create static
dnl libtool-libraries, too.
AC_ENABLE_STATIC(no)

dnl just a wrapper to clean up configure.in
AC_DEFUN([GLUCAT_PROG_LIBTOOL],
[
AC_REQUIRE([GLUCAT_CHECK_COMPILERS])
AC_REQUIRE([AC_ENABLE_SHARED])
AC_REQUIRE([AC_ENABLE_STATIC])

AC_REQUIRE([AC_LIBTOOL_DLOPEN])

AC_LANG_SAVE
AC_LANG_C
AC_OBJEXT
AC_EXEEXT
AC_LANG_RESTORE

AM_PROG_LIBTOOL
AC_LIBTOOL_CXX

LIBTOOL_SHELL="/bin/sh ./libtool"
#  LIBTOOL="$LIBTOOL --silent"
KDE_PLUGIN="-avoid-version -module -no-undefined \$(KDE_RPATH) \$(KDE_MT_LDFLAGS)"
AC_SUBST(KDE_PLUGIN)

AC_ARG_ENABLE(objprelink, [  --enable-objprelink     prelink apps using objprelink (experimental [only tested on linux/386])],
       kde_use_objprelink=$enableval, kde_use_objprelink=no)
  if test "x$kde_use_objprelink" = "xyes"; then

      KDE_FIND_PATH(objprelink, OBJPRELINK, [], [kde_use_objprelink=no])

      if test "x$kde_use_objprelink" = "xyes"; then
      AC_MSG_CHECKING([Patching libtool to run objprelink.])
      mv libtool libtool.orig
      cat > libtool <<\EOF
#! /bin/sh
for n ; do case $n in
  *.o)  test -r $n && echo objprelink $n && objprelink $n ;;
  *.lo) m=`basename $n .lo`".o" && test -r $m && echo objprelink $m && objprelink $m
        m=".libs/$m" && test -r $m && echo objprelink $m && objprelink $m ;;
esac; done
EOF
      cat >> libtool libtool.orig
      rm libtool.orig
      chmod a+x libtool
      AC_MSG_RESULT(done)
	fi
  fi
])

dnl create a working libtool-script
GLUCAT_PROG_LIBTOOL

dnl activate the next macro call for DLOPEN tests and setting LIBDL
dnl   (n.b. KDE_MISC_TESTS does the same to you, so use either this or the next one)
dnl KDE_CHECK_DLOPEN

dnl activate the next macro call for some additional tests
dnl   (compat, crypt, socket, nsl, dlopen, ...)
dnl KDE_MISC_TESTS dnl __kdevelop__

dnl KDE_NEED_FLEX dnl __kdevelop__
dnl AC_PROG_YACC dnl __kdevelop__

dnl KDE_CHECK_EXTRA_LIBS
dnl all_libraries="$all_libraries $USER_LDFLAGS"
dnl all_includes="$all_includes $USER_INCLUDES"
AC_SUBST(all_includes)
AC_SUBST(all_libraries)

AC_SUBST(AUTODIRS)

AM_CONDITIONAL([make_pyclical],[test $glucat_use_pyclical = "yes"])KDE_CREATE_SUBDIRSLIST
AC_CONFIG_FILES([ Makefile ])
AC_CONFIG_FILES([ gfft_test/Makefile ])
AC_CONFIG_FILES([ glucat/Makefile ])
AC_CONFIG_FILES([ products/Makefile ])
AC_CONFIG_FILES([ squaring/Makefile ])
AC_CONFIG_FILES([ test/Makefile ])
AC_CONFIG_FILES([ test00/Makefile ])
AC_CONFIG_FILES([ test01/Makefile ])
AC_CONFIG_FILES([ test02/Makefile ])
AC_CONFIG_FILES([ test03/Makefile ])
AC_CONFIG_FILES([ test04/Makefile ])
AC_CONFIG_FILES([ test05/Makefile ])
AC_CONFIG_FILES([ test06/Makefile ])
AC_CONFIG_FILES([ test07/Makefile ])
AC_CONFIG_FILES([ test08/Makefile ])
AC_CONFIG_FILES([ test09/Makefile ])
AC_CONFIG_FILES([ test10/Makefile ])
AC_CONFIG_FILES([ test11/Makefile ])
AC_CONFIG_FILES([ test12/Makefile ])
AC_CONFIG_FILES([ test13/Makefile ])
AC_CONFIG_FILES([ test14/Makefile ])
AC_CONFIG_FILES([ test15/Makefile ])
AC_CONFIG_FILES([ test16/Makefile ])
AC_CONFIG_FILES([ transforms/Makefile ])
if test "$glucat_use_pyclical" == "yes"; then
  AC_CONFIG_FILES([ pyclical/Makefile ])
fi
AC_OUTPUT
