Purpose
-------
 GluCat is a library of template classes which models the universal Clifford
 algebras over the real field, with arbitrary dimension and arbitrary
 signature.  To do this, GluCat implements a model of each Clifford algebra
 corresponding to each non-degenerate quadratic form up to a maximum set by
 the user.

 GluCat classes are designed for use as numeric class template parameters with
 other template libraries, such as Blitz++, deal.II, Matrix Template Library 
 and POOMA. These template libraries expect a numeric class which implements
 "appropriate numeric semantics". To provide these semantics, the GluCat
 interface matches float or complex<> as much as possible. Yet the GluCat
 classes must be different from float or complex<>, because they model a
 different algebra.

Before you go any further
-------------------------
 Before you use this template library, become familiar with geometric and 
 Clifford algebras.
Web sites:
o Rafal Ablamowitz
  http://top.math.tntech.edu/rafal/
o Pertti Lounesto
  http://www.hut.fi/~ppuska/mirror/Lounesto/
o The Clifford Research Group at Ghent
  http://cage.rug.ac.be/~krauss/clg/cliffrug.html
o The Geometric Algebra Research Group at Cambridge:
  http://www.mrao.cam.ac.uk/~clifford/
o William Baylis:
  http://cronus.uwindsor.ca/baylis-research
o Leo Dorst
  http://carol.wins.uva.nl/~leo/clifford/
o John Fletcher
  http://www.ceac.aston.ac.uk/personal_pages/fletcher_john/
o David Hestenes
  http://modelingnts.la.asu.edu/
o Christian Perwass
  http://www.perwass.de/cbup/start.html

Books:
o Rafal Ablamowicz, Pertti Lounesto, Josep Parra (eds.),
  "Clifford Algebras with Numeric and Symbolic Computations",
  Birkhäuser, 1996.
o David Hestenes, Garret Sobczyk, "Clifford Algebra to Geometric Calculus"
  Kluwer, first published in 1984; reprinted with corrections in 1992.
o Pertti Lounesto, "Clifford Algebras and Spinors",
  Cambridge University Press, Second enhanced edition, 2001.
o Ian R. Porteous, "Clifford Algebras and the Classical groups",
  Cambridge University Press, 1995.

Software:
 o CLU, a C++ library with OPEN-GL graphics
   http://www.perwass.de/cbup/clu.html 
 o GAIGEN, a C++ code optimized generator   
   http://www.science.uva.nl/ga/gaigen/
 o CLICAL, a Clifford algebra calculator
   http://www.hut.fi/~ppuska/mirror/Lounesto/CLICAL.htm
 o CLIFFORD for Maple 9
   http://math.tntech.edu/rafal/cliff9/index.html
 o GA Package for Maple V
   http://www.mrao.cam.ac.uk/~clifford/software/GA/
 o GABLE, a Matlab package with visualization
   http://carol.wins.uva.nl/~leo/GABLE/index.html 

Dependencies, Installation and Testing
------------------------
 See INSTALL.

Usage
-----
 As of the current version there are no detailed usage instructions. What
 follows is a brief summary of usage. See also http://glucat.sourceforge.net

 To see brief descriptions of the classes, functions and operators which
 GluCat defines, see the Doxygen API documentation in ./glucat-api/html

 GluCat is a C++ template library, similar to the C++ Standard Library or the
 Boost uBLAS Library (uBLAS). It consists entirely of source code header
 files, plus a suite of test routines.

 To use GluCat:
 o Make sure that the installation directory is in your include path.
   The default installation directory is /usr/local/include
 o In your code, include individual files as <glucat/filename.h>
   You can also use the convenience headers <glucat/glucat.h> and
   <glucat/glucat_imp.h>
 o Use the test header files ./test/driver.h and ./transforms/transforms.h as
 guides. These contain lines which look something like:
 
#include "glucat/glucat.h"
typedef glucat::tuning<> Tune_P;
#include "glucat/glucat_imp.h"

 Tune_P is the tuning policy class. It may be included as a template parameter
 in future versions, but for now, you will need to define it as a typedef before
 including <glucat/glucat_imp.h>.
 The tuning<> template class is defined in <glucat/global.h>
 Glucat defines and uses the glucat:: namespace. You can use names from this
 namespace by using the glucat:: prefix or by using the following declaration:

using namespace glucat;

 o GluCat uses two preprocessor defines to control header files. In glucat.h:
 
 _GLUCAT_HAS_UBLAS_LU_H controls the use of the header files
 <boost/numeric/ublas/operation.hpp> and <boost/numeric/ublas/lu.hpp>.
 If _GLUCAT_HAS_UBLAS_LU_H is defined, glucat.h includes these uBLAS files, 
 which contain the uBLAS declarations and definitions for LU solve.
 Otherwise, the compilation includes the contents of ublas.h and ublas_imp.h,
 which contain a GluCat version of these definitions.
 
 The configure script automatically adds -D_GLUCAT_HAS_UBLAS_LU_H to CXXFLAGS
 in the test Makefiles, depending on whether it can find  these uBLAS files.
 For your own compilation, check the test Makefiles, and add 
 -D_GLUCAT_HAS_UBLAS_LU_H to your own Makefile as appropriate.
 
 _GLUCAT_USE_GNU_CXX_HASH_MAP controls the use of the header file 
 <ext/hash_map>. 
 If _GLUCAT_USE_GNU_CXX_HASH_MAP is defined, glucat.h includes this file, 
 which contains the GNU definitions and declarations for __gnu_cxx::hash_map. 
 The main purpose of this define is found in framed_multi.h. 
 If _GLUCAT_USE_GNU_CXX_HASH_MAP is defined, framed_multi.h defines 
 glucat::framed_multi<> using __gnu_cxx::hash_map<>, which is an unsorted map. 
 Otherwise framed_multi.h defines glucat::framed_multi<> using std::map<>, 
 which is a sorted map.
 
 The configure script flag --with-hash-map adds -D_GLUCAT_USE_GNU_CXX_HASH_MAP
 to CXXFLAGS in the test Makefiles, depending on whether you are using the g++
 compiler.  For your own compilation, check your compiler, and add 
 -D_GLUCAT_USE_GNU_CXX_HASH_MAP to your own Makefile if you want to use
 __gnu_cxx::hash_map<>.

Coding standards
----------------
   
 The headers are split into declarations and definitions. The software was
 developed using the g++ compiler, which does not implement the "export" keyword.
 Separate compilation is possible, if you include both the declarations and
 definitions in each compilation unit, but compilation is slow and the resulting
 binary is large.
 
 The code follows many, but not all of the guidelines in the
 GNU C++ Standard Library Style Guidelines at
 http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/C++STYLE
 The code also follows much of Scott Meyers' advice from "Effective C++",
 Second Edition.

 Some code conventions are:
 name_t: The name of a type, either global or local to a class.
 Sentence_Case_T: The name of a type used as a template parameter.
 Other_Sentence_Case: Other template parameters, including template template
 parameters.
 ALL_CAPS_WITH_UNDERSCORES: A global constant defined in <glucat/global.h>
